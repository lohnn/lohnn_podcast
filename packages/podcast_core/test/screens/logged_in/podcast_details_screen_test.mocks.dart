// Mocks generated by Mockito 5.4.6 from annotations
// in podcast_core/test/screens/logged_in/podcast_details_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter/foundation.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:podcast_core/data/episode.model.dart' as _i7;
import 'package:podcast_core/data/episode_with_status.dart' as _i8;
import 'package:podcast_core/data/play_queue_item.model.dart' as _i4;
import 'package:podcast_core/data/podcast.model.dart' as _i9;
import 'package:podcast_core/data/podcast_search.model.dart' as _i10;
import 'package:podcast_core/data/podcast_with_status.dart' as _i11;
import 'package:podcast_core/data/user_episode_status.model.dart' as _i3;
import 'package:podcast_core/repository.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeListenable_0 extends _i1.SmartFake implements _i2.Listenable {
  _FakeListenable_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserEpisodeStatus_1 extends _i1.SmartFake
    implements _i3.UserEpisodeStatus {
  _FakeUserEpisodeStatus_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePlayQueueItem_2 extends _i1.SmartFake implements _i4.PlayQueueItem {
  _FakePlayQueueItem_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i5.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Listenable get userPodcastSubscriptionsChanges =>
      (super.noSuchMethod(
            Invocation.getter(#userPodcastSubscriptionsChanges),
            returnValue: _FakeListenable_0(
              this,
              Invocation.getter(#userPodcastSubscriptionsChanges),
            ),
          )
          as _i2.Listenable);

  @override
  _i2.Listenable get episodesUpdated =>
      (super.noSuchMethod(
            Invocation.getter(#episodesUpdated),
            returnValue: _FakeListenable_0(
              this,
              Invocation.getter(#episodesUpdated),
            ),
          )
          as _i2.Listenable);

  @override
  _i6.Future<_i3.UserEpisodeStatus> getUserEpisodeStatus(
    _i7.Episode? episode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getUserEpisodeStatus, [episode]),
            returnValue: _i6.Future<_i3.UserEpisodeStatus>.value(
              _FakeUserEpisodeStatus_1(
                this,
                Invocation.method(#getUserEpisodeStatus, [episode]),
              ),
            ),
          )
          as _i6.Future<_i3.UserEpisodeStatus>);

  @override
  _i6.Stream<List<_i3.UserEpisodeStatus>> watchUserEpisodeStatuses() =>
      (super.noSuchMethod(
            Invocation.method(#watchUserEpisodeStatuses, []),
            returnValue: _i6.Stream<List<_i3.UserEpisodeStatus>>.empty(),
          )
          as _i6.Stream<List<_i3.UserEpisodeStatus>>);

  @override
  _i6.Future<void> markEpisodeListened(
    _i8.EpisodeWithStatus? episodeWithStatus, {
    bool? isPlayed = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #markEpisodeListened,
              [episodeWithStatus],
              {#isPlayed: isPlayed},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateEpisodePosition(
    _i7.Episode? episode,
    Duration? position,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateEpisodePosition, [episode, position]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Stream<List<_i7.Episode>> watchEpisodesFor({
    required _i9.PodcastId? podcast,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watchEpisodesFor, [], {#podcast: podcast}),
            returnValue: _i6.Stream<List<_i7.Episode>>.empty(),
          )
          as _i6.Stream<List<_i7.Episode>>);

  @override
  _i6.Future<void> updateLastSeenPodcast(_i9.PodcastId? podcast) =>
      (super.noSuchMethod(
            Invocation.method(#updateLastSeenPodcast, [podcast]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i9.Podcast>> getPodcasts() =>
      (super.noSuchMethod(
            Invocation.method(#getPodcasts, []),
            returnValue: _i6.Future<List<_i9.Podcast>>.value(<_i9.Podcast>[]),
          )
          as _i6.Future<List<_i9.Podcast>>);

  @override
  _i6.Stream<List<_i9.Podcast>> watchPodcasts() =>
      (super.noSuchMethod(
            Invocation.method(#watchPodcasts, []),
            returnValue: _i6.Stream<List<_i9.Podcast>>.empty(),
          )
          as _i6.Stream<List<_i9.Podcast>>);

  @override
  _i6.Future<void> subscribeToPodcast(_i9.PodcastRssUrl? podcast) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToPodcast, [podcast]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> unsubscribeFromPodcast(_i9.PodcastRssUrl? podcast) =>
      (super.noSuchMethod(
            Invocation.method(#unsubscribeFromPodcast, [podcast]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> refreshPodcast(_i9.PodcastRssUrl? podcast) =>
      (super.noSuchMethod(
            Invocation.method(#refreshPodcast, [podcast]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i4.PlayQueueItem>> getPlayQueue() =>
      (super.noSuchMethod(
            Invocation.method(#getPlayQueue, []),
            returnValue: _i6.Future<List<_i4.PlayQueueItem>>.value(
              <_i4.PlayQueueItem>[],
            ),
          )
          as _i6.Future<List<_i4.PlayQueueItem>>);

  @override
  _i6.Future<_i4.PlayQueueItem> getPlayQueueItem(_i7.Episode? episode) =>
      (super.noSuchMethod(
            Invocation.method(#getPlayQueueItem, [episode]),
            returnValue: _i6.Future<_i4.PlayQueueItem>.value(
              _FakePlayQueueItem_2(
                this,
                Invocation.method(#getPlayQueueItem, [episode]),
              ),
            ),
          )
          as _i6.Future<_i4.PlayQueueItem>);

  @override
  _i6.Stream<List<_i4.PlayQueueItem>> watchPlayQueue() =>
      (super.noSuchMethod(
            Invocation.method(#watchPlayQueue, []),
            returnValue: _i6.Stream<List<_i4.PlayQueueItem>>.empty(),
          )
          as _i6.Stream<List<_i4.PlayQueueItem>>);

  @override
  _i6.Future<void> updatePlayQueueItemPosition(
    _i7.Episode? episode,
    int? position,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updatePlayQueueItemPosition, [
              episode,
              position,
            ]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> deletePlayQueueItem(_i4.PlayQueueItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#deletePlayQueueItem, [item]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<List<_i10.PodcastSearch>> findPodcasts([String? searchTerm]) =>
      (super.noSuchMethod(
            Invocation.method(#findPodcasts, [searchTerm]),
            returnValue: _i6.Future<List<_i10.PodcastSearch>>.value(
              <_i10.PodcastSearch>[],
            ),
          )
          as _i6.Future<List<_i10.PodcastSearch>>);

  @override
  _i6.Future<List<_i11.PodcastWithStatus>> getPodcastsWithCount() =>
      (super.noSuchMethod(
            Invocation.method(#getPodcastsWithCount, []),
            returnValue: _i6.Future<List<_i11.PodcastWithStatus>>.value(
              <_i11.PodcastWithStatus>[],
            ),
          )
          as _i6.Future<List<_i11.PodcastWithStatus>>);
}
